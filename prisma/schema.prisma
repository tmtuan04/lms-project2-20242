generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tạo migration mới: npx prisma migrate dev --name your_migration_name
// Mục đích của @@index([field]): tạo index giúp tăng tốc độ truy vấn và giảm độ trễ khi có nhiều bản ghi

// User Model
model User {
  id           String  @id @default(uuid())
  name         String?
  email        String  @unique
  imageUrl     String? @db.Text
  authProvider String
  isActive     Boolean @default(true)
  isInstructor Boolean @default(false)

  // 1 người dùng có thể là giảng viên của nhiều khóa học
  courses     Course[]           @relation("InstructorCourses")
  enrollments CourseEnrollment[]
  chapterProgress ChapterProgress[]
  courseReviews   CourseReview[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
}

// Category Model
model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

// Course Model
model Course {
  id        String  @id @default(uuid())
  courseUrl String? @db.Text
  title     String? @db.Text // Có thể dùng cái này ở phần Objective?

  instructorId String
  // InstructorCourses là tên quan hệ để tránh nhầm lẫn
  instructor   User   @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)

  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  enrollments CourseEnrollment[]
  courseReviews   CourseReview[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]

  @@index([categoryId])
  @@index([instructorId])
}

// Chapter (Mỗi khoá học có nhiều chapter)
model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  isLocked    Boolean @default(true)
  
  order       Int

  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  attachments ChapterAttachment[]
  progress    ChapterProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// ChapterAttachment Model
model ChapterAttachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

// CourseEnroll Model
model CourseEnrollment {
  id       String @id @default(uuid())
  userId   String
  courseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

// Payment Model: đang bị lỗi, nếu xoá khoá học cũng xoá luôn những thông tin giao dịch
model Payment {
  id            String        @id @default(uuid())
  userId        String
  courseId      String
  amount        String
  status        PaymentStatus @default(PENDING)
  provider      String?
  providerTxnId String?

  // Relation
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([courseId])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model ChapterProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  completedAt DateTime?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([chapterId])
}

model CourseReview {
  id String @id @default(uuid())

  userId String
  courseId String

  rating Int // 1 đến 5 sao
  comment String? @db.Text

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // @@unique([userId, courseId]) // Mỗi user chỉ review 1 lần cho 1 khóa
  @@index([courseId])
  @@index([userId])
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd/diagram.jpg"
  format   = "jpg"
}